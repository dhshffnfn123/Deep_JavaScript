//? 프로토타입
// 자바스크립트는 클래스 기반 객체지향 프로그래밍 언어보다 효율적으로 더 강력한 객체지향 프로그래밍 능력을 지니고 있는 프로토타입 기반의 객체지향 프로그래밍 언어이다.

// 자바스크립트는 객체 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 모든 것이 객체이다. 원시타입의 값을 제외한 나머지 값들은 모두 객체이다.

//? 객체지향 프로그래밍
// 객체지향 프로그래밍은 프로그램을 명령어 또는 함수의 목록으로 보는 전통적인 명령형 프로그래밍의 절차지향적 관점에서 벗어나
// 여러개의 독립적 단위, 즉 객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임을 말한다.

// 객체지향 프로그래밍은 실세께의 실체를 인식하는 철학적 사고를 프로그래밍에 접목하려는 시도에서 시작한다.
// 실체는 특징이나 성질을 나타내는 속성을 가지고 있고 이를 통해 실체를 인식하거나 구별할 수 있다.

// 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 '추상화' 라고 한다.
const person = {
  name: "An",
  address: "Paju"
};
console.log(person); // {name: "Lee", address: "Paju" }

// TODO 속성을 통해 여러개의 값을 하나의 단위로 구성한 복합적인 자료구조를 객체라 한다.
// 객체지향 프로그래밍은 독립적인 객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임이다.

// 원이라니 개념을 객체로 만들어보자. 원에는 반지름이라는 속성이 있다.
// 이때 반지름은 원의 상태를 나타내는 데이터이며 원의 지름, 둘레, 넓이를 구하는 것은 동작이다.
const circle = {
  radius: 5, // 반지름
  
  // 원의 지름: 2r
  getDiameter() {
    return 2 * this.radius;
  },
  
  getPermeter() {
    return 2 * Math.PI * this.radius;
  },
  getArea() {
    return Math.PI * this.radius ** 2;
  }
};

console.log(circle);

console.log(circle.getDiameter()); // 10
console.log(circle.getPermeter()); // 31.41592653589793
console.log(circle.getArea()); // 78.53981633974483

// 이처럼 객체지향 프로그램밍은 객체의 상태를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작을 하나의 논리적인 단위로 묶어 생각한다.
// TODO 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라고 할 수 있다.